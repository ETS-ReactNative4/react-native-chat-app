{"ast":null,"code":"import _classCallCheck from \"/Users/calebkress/Repos/ssbu-viz/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/calebkress/Repos/ssbu-viz/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/calebkress/Repos/ssbu-viz/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/calebkress/Repos/ssbu-viz/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/calebkress/Repos/ssbu-viz/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/calebkress/Repos/ssbu-viz/src/Viz.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3'; //\n// const Viz = (props) => {\n//   useEffect(() => {\n//    d3.select('.viz > *').remove();\n//    draw(props)\n//  }, [props.shapes.length])\n//   return <div className=\"viz\" />\n// }\n//\n// const draw = (props) => {\n//     const w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n//     const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n//     d3.select('.viz').append('svg')\n//       .attr('height', h)\n//       .attr('width', w)\n//       .attr('id', 'svg-viz')\n//\n//     const bubbles = props.shapes\n//     const max = d3.max(bubbles)\n//     const radiusScale = d3.scaleSqrt().domain([0, max]).range([0, max])\n//\n//     const simulation = d3.forceSimulation()\n//       .force('x', d3.forceX(w/3).strength(0.05))\n//       .force('y', d3.forceY(h/3).strength(0.05))\n//       .force('charge', d3.forceManyBody().strength(-1300))\n//       .force('collide', d3.forceCollide(d => radiusScale(d.number)+1))\n//\n//   const circles = d3.select('#svg-viz').selectAll('circle')\n//     .data(props.shapes)\n//     .enter()\n//     .append('svg:circle')\n//     .attr('r', d => d.width/2+\"px\")\n//     .style('fill', (d) => d.color ? d.color : null)\n//\n//   simulation.nodes(props.shapes)\n//   .on('tick', ticked)\n//\n//   function ticked() {\n//       circles\n//       .attr('cx', d => d.x)\n//       .attr('cy', d => d.y)\n//     }\n//   }\n// export default Viz\n\nvar Viz =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Viz, _Component);\n\n  function Viz() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Viz);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Viz)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.draw = function (props) {\n      var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n      var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n      d3.select('.viz').append('svg').attr('height', h).attr('width', w).attr('id', 'svg-viz');\n      var bubbles = props.shapes;\n      var max = d3.max(bubbles);\n      var radiusScale = d3.scaleSqrt().domain([0, max]).range([0, max]);\n      var simulation = d3.forceSimulation().force('x', d3.forceX(w / 3).strength(0.05)).force('y', d3.forceY(h / 3).strength(0.05)).force('charge', d3.forceManyBody().strength(-1300)).force('collide', d3.forceCollide(function (d) {\n        return radiusScale(d.number) + 1;\n      }));\n      var circles = d3.select('#svg-viz').selectAll('circle').data(props.shapes).enter().append('svg:circle').attr('r', function (d) {\n        return d.width / 2 + \"px\";\n      }).style('fill', function (d) {\n        return d.color ? d.color : 'purple';\n      });\n      simulation.nodes(props.shapes).on('tick', ticked);\n\n      function ticked() {\n        circles.attr('cx', function (d) {\n          return d.x;\n        }).attr('cy', function (d) {\n          return d.y;\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Viz, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.draw(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      //this makes sure we don't redraw unnecessarily --\n      //only when we add a new shape\n      if (this.props.shapes.length !== prevProps.shapes.length) {\n        d3.select('.viz > *').remove();\n        this.draw(this.props);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"viz\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Viz;\n}(Component);\n\nexport { Viz as default };","map":{"version":3,"sources":["/Users/calebkress/Repos/ssbu-viz/src/Viz.js"],"names":["React","Component","d3","Viz","draw","props","w","Math","max","document","documentElement","clientWidth","window","innerWidth","h","clientHeight","innerHeight","select","append","attr","bubbles","shapes","radiusScale","scaleSqrt","domain","range","simulation","forceSimulation","force","forceX","strength","forceY","forceManyBody","forceCollide","d","number","circles","selectAll","data","enter","width","style","color","nodes","on","ticked","x","y","prevProps","length","remove"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\n//\n// const Viz = (props) => {\n//   useEffect(() => {\n//    d3.select('.viz > *').remove();\n//    draw(props)\n//  }, [props.shapes.length])\n//   return <div className=\"viz\" />\n// }\n//\n// const draw = (props) => {\n//     const w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n//     const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n//     d3.select('.viz').append('svg')\n//       .attr('height', h)\n//       .attr('width', w)\n//       .attr('id', 'svg-viz')\n//\n//     const bubbles = props.shapes\n//     const max = d3.max(bubbles)\n//     const radiusScale = d3.scaleSqrt().domain([0, max]).range([0, max])\n//\n//     const simulation = d3.forceSimulation()\n//       .force('x', d3.forceX(w/3).strength(0.05))\n//       .force('y', d3.forceY(h/3).strength(0.05))\n//       .force('charge', d3.forceManyBody().strength(-1300))\n//       .force('collide', d3.forceCollide(d => radiusScale(d.number)+1))\n//\n//   const circles = d3.select('#svg-viz').selectAll('circle')\n//     .data(props.shapes)\n//     .enter()\n//     .append('svg:circle')\n//     .attr('r', d => d.width/2+\"px\")\n//     .style('fill', (d) => d.color ? d.color : null)\n//\n//   simulation.nodes(props.shapes)\n//   .on('tick', ticked)\n//\n//   function ticked() {\n//       circles\n//       .attr('cx', d => d.x)\n//       .attr('cy', d => d.y)\n//     }\n//   }\n// export default Viz\n\n\nexport default class Viz extends Component {\n  componentDidMount() {\n  \tthis.draw(this.props)\n  }\n  componentDidUpdate(prevProps){\n    //this makes sure we don't redraw unnecessarily --\n    //only when we add a new shape\n    if(this.props.shapes.length !== prevProps.shapes.length){\n      d3.select('.viz > *').remove();\n      this.draw(this.props)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"viz\" />\n    )\n  }\n\n  draw = (props) => {\n    const w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    d3.select('.viz').append('svg')\n      .attr('height', h)\n      .attr('width', w)\n      .attr('id', 'svg-viz')\n\n    const bubbles = props.shapes\n    const max = d3.max(bubbles)\n  \tconst radiusScale = d3.scaleSqrt().domain([0, max]).range([0, max])\n\n  \tconst simulation = d3.forceSimulation()\n  \t\t.force('x', d3.forceX(w/3).strength(0.05))\n  \t\t.force('y', d3.forceY(h/3).strength(0.05))\n  \t\t.force('charge', d3.forceManyBody().strength(-1300))\n  \t\t.force('collide', d3.forceCollide(d => radiusScale(d.number)+1))\n\n\tconst circles = d3.select('#svg-viz').selectAll('circle')\n\t  .data(props.shapes)\n\t  .enter()\n\t  .append('svg:circle')\n\t  .attr('r', d => d.width/2+\"px\")\n\t  .style('fill', (d) => d.color ? d.color : 'purple')\n\n\tsimulation.nodes(props.shapes)\n\t.on('tick', ticked)\n\n\tfunction ticked() {\n  \t  circles\n  \t  .attr('cx', d => d.x)\n  \t  .attr('cy', d => d.y)\n  \t}\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}